
Proyecto_ Final.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000e2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000db8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  00000e2c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e2c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e5c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001466  00000000  00000000  00000f84  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000996  00000000  00000000  000023ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000990  00000000  00000000  00002d80  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000368  00000000  00000000  00003710  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ee  00000000  00000000  00003a78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c91  00000000  00000000  00003f66  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00004bf7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__vector_3>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 26 01 	jmp	0x24c	; 0x24c <__vector_5>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a6 30       	cpi	r26, 0x06	; 6
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 81 00 	call	0x102	; 0x102 <main>
  88:	0c 94 da 06 	jmp	0xdb4	; 0xdb4 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initADC>:
#include "ADC.h"

void initADC(void){
	ADMUX = 0;
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	10 82       	st	Z, r1
	ADMUX |= (1 << REFS0);		
  96:	80 81       	ld	r24, Z
  98:	80 64       	ori	r24, 0x40	; 64
  9a:	80 83       	st	Z, r24
	ADMUX &= ~(1 << REFS1);		
  9c:	80 81       	ld	r24, Z
  9e:	8f 77       	andi	r24, 0x7F	; 127
  a0:	80 83       	st	Z, r24
	ADMUX |= (1 << ADLAR);		// JUSTIFICACION A LA DERECHA
  a2:	80 81       	ld	r24, Z
  a4:	80 62       	ori	r24, 0x20	; 32
  a6:	80 83       	st	Z, r24
	
	ADCSRA = 0;
  a8:	ea e7       	ldi	r30, 0x7A	; 122
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	10 82       	st	Z, r1
	ADCSRA |= (1 << ADEN);				
  ae:	80 81       	ld	r24, Z
  b0:	80 68       	ori	r24, 0x80	; 128
  b2:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS0);
  b4:	80 81       	ld	r24, Z
  b6:	81 60       	ori	r24, 0x01	; 1
  b8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS1);
  ba:	80 81       	ld	r24, Z
  bc:	82 60       	ori	r24, 0x02	; 2
  be:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS2);		
  c0:	80 81       	ld	r24, Z
  c2:	84 60       	ori	r24, 0x04	; 4
  c4:	80 83       	st	Z, r24
	
	DIDR0 |= (1 << ADC0D);		
  c6:	ee e7       	ldi	r30, 0x7E	; 126
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	81 60       	ori	r24, 0x01	; 1
  ce:	80 83       	st	Z, r24
	DIDR0 |= (1 << ADC1D);		
  d0:	80 81       	ld	r24, Z
  d2:	82 60       	ori	r24, 0x02	; 2
  d4:	80 83       	st	Z, r24
	DIDR0 |= (1 << ADC2D);		
  d6:	80 81       	ld	r24, Z
  d8:	84 60       	ori	r24, 0x04	; 4
  da:	80 83       	st	Z, r24
  dc:	08 95       	ret

000000de <ADC_CONVERT>:
}

uint8_t ADC_CONVERT(uint8_t canal){
	ADMUX = (ADMUX & 0xF0)|canal;	// SELECCION DEL CANAL
  de:	ec e7       	ldi	r30, 0x7C	; 124
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	90 81       	ld	r25, Z
  e4:	90 7f       	andi	r25, 0xF0	; 240
  e6:	89 2b       	or	r24, r25
  e8:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);			// INICIA EL ADC
  ea:	ea e7       	ldi	r30, 0x7A	; 122
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	80 64       	ori	r24, 0x40	; 64
  f2:	80 83       	st	Z, r24
	while((ADCSRA)&(1<<ADSC));		// FINALIZA LA CONVERSION
  f4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  f8:	86 fd       	sbrc	r24, 6
  fa:	fc cf       	rjmp	.-8      	; 0xf4 <ADC_CONVERT+0x16>
	return(ADCH);
  fc:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 100:	08 95       	ret

00000102 <main>:
void setup(void);
unsigned char R_eeprom(unsigned int Adress); // Declaración de la función R_eeprom
void W_eeprom(unsigned int Adress, unsigned char Data); // Declaración de la función W_eeprom

int main(void) {
	cli(); 
 102:	f8 94       	cli

	DDRD &= ~((1 << DDD6) | (1 << DDD7) | (1 << DDD4)| (1 << DDD2)); // PD6, PD7 y PD4 como entradas
 104:	8a b1       	in	r24, 0x0a	; 10
 106:	8b 72       	andi	r24, 0x2B	; 43
 108:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << PORTD6) | (1 << PORTD7) | (1 << PORTD4)| (1 << PORTD2); // Activar pull-ups en PD6, PD7 y PD4
 10a:	8b b1       	in	r24, 0x0b	; 11
 10c:	84 6d       	ori	r24, 0xD4	; 212
 10e:	8b b9       	out	0x0b, r24	; 11
	
	DDRB &= ~((1 << DDB0) | (1 << DDB4)| (1 << DDB5)); // PB0 y PB4 como entradas
 110:	84 b1       	in	r24, 0x04	; 4
 112:	8e 7c       	andi	r24, 0xCE	; 206
 114:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << PORTB0) | (1 << PORTB4)| (1 << PORTB5); // Activar pull-ups en PB0 y PB4
 116:	85 b1       	in	r24, 0x05	; 5
 118:	81 63       	ori	r24, 0x31	; 49
 11a:	85 b9       	out	0x05, r24	; 5
	
	DDRC |= (1 << DDC0) | (1 << DDC1) | (1 << DDC2); // PC0, PC1 y PC2 como salidas
 11c:	87 b1       	in	r24, 0x07	; 7
 11e:	87 60       	ori	r24, 0x07	; 7
 120:	87 b9       	out	0x07, r24	; 7
	PORTC &= ~((1 << PORTC0) | (1 << PORTC1) | (1 << PORTC2)); // Iniciar LEDs apagados
 122:	88 b1       	in	r24, 0x08	; 8
 124:	88 7f       	andi	r24, 0xF8	; 248
 126:	88 b9       	out	0x08, r24	; 8

	initADC();
 128:	0e 94 48 00 	call	0x90	; 0x90 <initADC>
	initPWM1A(no_invertido, 8, 39999);
 12c:	4f e3       	ldi	r20, 0x3F	; 63
 12e:	5c e9       	ldi	r21, 0x9C	; 156
 130:	68 e0       	ldi	r22, 0x08	; 8
 132:	70 e0       	ldi	r23, 0x00	; 0
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	0e 94 04 04 	call	0x808	; 0x808 <initPWM1A>
	initPWM1B(no_invertido, 8, 39999);
 13a:	4f e3       	ldi	r20, 0x3F	; 63
 13c:	5c e9       	ldi	r21, 0x9C	; 156
 13e:	68 e0       	ldi	r22, 0x08	; 8
 140:	70 e0       	ldi	r23, 0x00	; 0
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	0e 94 31 04 	call	0x862	; 0x862 <initPWM1B>
	initPWM2A(no_invertido, 1024);
 148:	60 e0       	ldi	r22, 0x00	; 0
 14a:	74 e0       	ldi	r23, 0x04	; 4
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	0e 94 f5 02 	call	0x5ea	; 0x5ea <initPWM2A>
	initPWM2B(no_invertido, 1024);
 152:	60 e0       	ldi	r22, 0x00	; 0
 154:	74 e0       	ldi	r23, 0x04	; 4
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	0e 94 17 03 	call	0x62e	; 0x62e <initPWM2B>

	PCICR |= (1 << PCIE2); 
 15c:	e8 e6       	ldi	r30, 0x68	; 104
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	80 81       	ld	r24, Z
 162:	84 60       	ori	r24, 0x04	; 4
 164:	80 83       	st	Z, r24
	PCMSK2 |= (1 << PCINT23)| (1 << PCINT20)| (1 << PCINT18); 
 166:	ad e6       	ldi	r26, 0x6D	; 109
 168:	b0 e0       	ldi	r27, 0x00	; 0
 16a:	8c 91       	ld	r24, X
 16c:	84 69       	ori	r24, 0x94	; 148
 16e:	8c 93       	st	X, r24

	PCICR |= (1 << PCIE0); 
 170:	80 81       	ld	r24, Z
 172:	81 60       	ori	r24, 0x01	; 1
 174:	80 83       	st	Z, r24
	PCMSK0 |= (1 << PCINT0) | (1 << PCINT4)| (1 << PCINT5); 
 176:	eb e6       	ldi	r30, 0x6B	; 107
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	80 81       	ld	r24, Z
 17c:	81 63       	ori	r24, 0x31	; 49
 17e:	80 83       	st	Z, r24

	UCSR0B = 0; // Deshabilitar TX y RX
 180:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>

	sei(); 
 184:	78 94       	sei

	while (1) {
		switch (Estado) {
 186:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 18a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 18e:	81 30       	cpi	r24, 0x01	; 1
 190:	91 05       	cpc	r25, r1
 192:	e1 f1       	breq	.+120    	; 0x20c <main+0x10a>
 194:	82 30       	cpi	r24, 0x02	; 2
 196:	91 05       	cpc	r25, r1
 198:	e1 f1       	breq	.+120    	; 0x212 <main+0x110>
 19a:	89 2b       	or	r24, r25
 19c:	e9 f5       	brne	.+122    	; 0x218 <main+0x116>
			case 0:
			PORTC = (1 << PC0); // Enciende el LED en PC0
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a2:	8f e3       	ldi	r24, 0x3F	; 63
 1a4:	9c e9       	ldi	r25, 0x9C	; 156
 1a6:	01 97       	sbiw	r24, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <main+0xa4>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <main+0xaa>
 1ac:	00 00       	nop

			_delay_ms(10);
			DutyC1 = ADC_CONVERT(6);
 1ae:	86 e0       	ldi	r24, 0x06	; 6
 1b0:	0e 94 6f 00 	call	0xde	; 0xde <ADC_CONVERT>
 1b4:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <DutyC1>
			updateDutyCA1(DutyC1);
 1b8:	0e 94 5e 04 	call	0x8bc	; 0x8bc <updateDutyCA1>
 1bc:	8f e3       	ldi	r24, 0x3F	; 63
 1be:	9c e9       	ldi	r25, 0x9C	; 156
 1c0:	01 97       	sbiw	r24, 0x01	; 1
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <main+0xbe>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <main+0xc4>
 1c6:	00 00       	nop

			_delay_ms(10);
			DutyC2 = ADC_CONVERT(4);
 1c8:	84 e0       	ldi	r24, 0x04	; 4
 1ca:	0e 94 6f 00 	call	0xde	; 0xde <ADC_CONVERT>
 1ce:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <DutyC2>
			updateDutyCA2(DutyC2);
 1d2:	0e 94 39 03 	call	0x672	; 0x672 <updateDutyCA2>
 1d6:	8f e3       	ldi	r24, 0x3F	; 63
 1d8:	9c e9       	ldi	r25, 0x9C	; 156
 1da:	01 97       	sbiw	r24, 0x01	; 1
 1dc:	f1 f7       	brne	.-4      	; 0x1da <main+0xd8>
 1de:	00 c0       	rjmp	.+0      	; 0x1e0 <main+0xde>
 1e0:	00 00       	nop

			_delay_ms(10);
			DutyC3 = ADC_CONVERT(5);
 1e2:	85 e0       	ldi	r24, 0x05	; 5
 1e4:	0e 94 6f 00 	call	0xde	; 0xde <ADC_CONVERT>
 1e8:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <DutyC3>
			updateDutyCB1(DutyC3);
 1ec:	0e 94 99 04 	call	0x932	; 0x932 <updateDutyCB1>
 1f0:	8f e3       	ldi	r24, 0x3F	; 63
 1f2:	9c e9       	ldi	r25, 0x9C	; 156
 1f4:	01 97       	sbiw	r24, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <main+0xf2>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <main+0xf8>
 1fa:	00 00       	nop

			_delay_ms(10);
			DutyC4 = ADC_CONVERT(7);
 1fc:	87 e0       	ldi	r24, 0x07	; 7
 1fe:	0e 94 6f 00 	call	0xde	; 0xde <ADC_CONVERT>
 202:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <DutyC4>
			updateDutyCB2(DutyC4);
 206:	0e 94 6f 03 	call	0x6de	; 0x6de <updateDutyCB2>

			break;
 20a:	bd cf       	rjmp	.-134    	; 0x186 <main+0x84>
			
			case 1:
			PORTC = (1 << PC1); // Enciende el LED en PC1
 20c:	82 e0       	ldi	r24, 0x02	; 2
 20e:	88 b9       	out	0x08, r24	; 8

			break;
 210:	ba cf       	rjmp	.-140    	; 0x186 <main+0x84>
		
			case 2:
			PORTC = (1 << PC2);
 212:	84 e0       	ldi	r24, 0x04	; 4
 214:	88 b9       	out	0x08, r24	; 8
			break;
 216:	b7 cf       	rjmp	.-146    	; 0x186 <main+0x84>
			
			default:
			Estado = 0;
 218:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 21c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			break;
 220:	b2 cf       	rjmp	.-156    	; 0x186 <main+0x84>

00000222 <R_eeprom>:
	
}

unsigned char R_eeprom(unsigned int Adress) {
	// Esperar la finalización de la escritura anterior
	while (EECR & (1 << EEPE));
 222:	f9 99       	sbic	0x1f, 1	; 31
 224:	fe cf       	rjmp	.-4      	; 0x222 <R_eeprom>
	// Configurar el registro de dirección
	EEAR = Adress;
 226:	92 bd       	out	0x22, r25	; 34
 228:	81 bd       	out	0x21, r24	; 33
	// Iniciar la lectura de la EEPROM escribiendo EERE
	EECR |= (1 << EERE);
 22a:	8f b3       	in	r24, 0x1f	; 31
 22c:	81 60       	ori	r24, 0x01	; 1
 22e:	8f bb       	out	0x1f, r24	; 31
	// Devolver los datos del registro de datos
	return EEDR;
 230:	80 b5       	in	r24, 0x20	; 32
}
 232:	08 95       	ret

00000234 <W_eeprom>:

void W_eeprom(unsigned int Adress, unsigned char Data) {
	// Esperar la finalización de la escritura anterior
	while (EECR & (1 << EEPE));
 234:	f9 99       	sbic	0x1f, 1	; 31
 236:	fe cf       	rjmp	.-4      	; 0x234 <W_eeprom>
	
	EEAR = Adress;
 238:	92 bd       	out	0x22, r25	; 34
 23a:	81 bd       	out	0x21, r24	; 33
	EEDR = Data;
 23c:	60 bd       	out	0x20, r22	; 32

	EECR |= (1 << EEMPE);
 23e:	8f b3       	in	r24, 0x1f	; 31
 240:	84 60       	ori	r24, 0x04	; 4
 242:	8f bb       	out	0x1f, r24	; 31
	
	EECR |= (1 << EEPE);
 244:	8f b3       	in	r24, 0x1f	; 31
 246:	82 60       	ori	r24, 0x02	; 2
 248:	8f bb       	out	0x1f, r24	; 31
 24a:	08 95       	ret

0000024c <__vector_5>:
			break;
		}
	}
}

ISR(PCINT2_vect) {
 24c:	1f 92       	push	r1
 24e:	0f 92       	push	r0
 250:	0f b6       	in	r0, 0x3f	; 63
 252:	0f 92       	push	r0
 254:	11 24       	eor	r1, r1
 256:	2f 93       	push	r18
 258:	3f 93       	push	r19
 25a:	4f 93       	push	r20
 25c:	5f 93       	push	r21
 25e:	6f 93       	push	r22
 260:	7f 93       	push	r23
 262:	8f 93       	push	r24
 264:	9f 93       	push	r25
 266:	af 93       	push	r26
 268:	bf 93       	push	r27
 26a:	ef 93       	push	r30
 26c:	ff 93       	push	r31
	if ((PIND & (1 << PIND7)) == 0) {
 26e:	4f 99       	sbic	0x09, 7	; 9
 270:	20 c0       	rjmp	.+64     	; 0x2b2 <__vector_5+0x66>
 272:	2f ef       	ldi	r18, 0xFF	; 255
 274:	80 e7       	ldi	r24, 0x70	; 112
 276:	92 e0       	ldi	r25, 0x02	; 2
 278:	21 50       	subi	r18, 0x01	; 1
 27a:	80 40       	sbci	r24, 0x00	; 0
 27c:	90 40       	sbci	r25, 0x00	; 0
 27e:	e1 f7       	brne	.-8      	; 0x278 <__vector_5+0x2c>
 280:	00 c0       	rjmp	.+0      	; 0x282 <__vector_5+0x36>
 282:	00 00       	nop
		_delay_ms(50);
		if ((PIND & (1 << PIND7)) == 0) { // Verificar si el botón sigue presionado
 284:	4f 99       	sbic	0x09, 7	; 9
 286:	9b c0       	rjmp	.+310    	; 0x3be <__vector_5+0x172>
			Estado++;
 288:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 28c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 290:	01 96       	adiw	r24, 0x01	; 1
 292:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 296:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			if (Estado > 2) {
 29a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 29e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2a2:	03 97       	sbiw	r24, 0x03	; 3
 2a4:	0c f4       	brge	.+2      	; 0x2a8 <__vector_5+0x5c>
 2a6:	8b c0       	rjmp	.+278    	; 0x3be <__vector_5+0x172>
				Estado = 0; // Resetear estado si sobrepasa el límite
 2a8:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2ac:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 2b0:	86 c0       	rjmp	.+268    	; 0x3be <__vector_5+0x172>
			}
		}
	}
	
	else if ((PIND & (1 << PIND4)) == 0) {
 2b2:	4c 99       	sbic	0x09, 4	; 9
 2b4:	41 c0       	rjmp	.+130    	; 0x338 <__vector_5+0xec>
		
		PORTC = (1 << PC2);
 2b6:	84 e0       	ldi	r24, 0x04	; 4
 2b8:	88 b9       	out	0x08, r24	; 8
		if (Estado == 0) {
 2ba:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2be:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2c2:	89 2b       	or	r24, r25
 2c4:	c9 f4       	brne	.+50     	; 0x2f8 <__vector_5+0xac>
			W_eeprom(0, DutyC1);
 2c6:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <DutyC1>
 2ca:	80 e0       	ldi	r24, 0x00	; 0
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	0e 94 1a 01 	call	0x234	; 0x234 <W_eeprom>
			W_eeprom(1, DutyC2);
 2d2:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <DutyC2>
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	0e 94 1a 01 	call	0x234	; 0x234 <W_eeprom>
			W_eeprom(2, DutyC3);
 2de:	60 91 03 01 	lds	r22, 0x0103	; 0x800103 <DutyC3>
 2e2:	82 e0       	ldi	r24, 0x02	; 2
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	0e 94 1a 01 	call	0x234	; 0x234 <W_eeprom>
			W_eeprom(3, DutyC4);
 2ea:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <DutyC4>
 2ee:	83 e0       	ldi	r24, 0x03	; 3
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	0e 94 1a 01 	call	0x234	; 0x234 <W_eeprom>
 2f6:	63 c0       	rjmp	.+198    	; 0x3be <__vector_5+0x172>
			} else if (Estado == 1) {
 2f8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2fc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 300:	01 97       	sbiw	r24, 0x01	; 1
 302:	09 f0       	breq	.+2      	; 0x306 <__vector_5+0xba>
 304:	5c c0       	rjmp	.+184    	; 0x3be <__vector_5+0x172>
			uint8_t readDutyC1 = R_eeprom(0);
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	0e 94 11 01 	call	0x222	; 0x222 <R_eeprom>
			updateDutyCA1(readDutyC1);
 30e:	0e 94 5e 04 	call	0x8bc	; 0x8bc <updateDutyCA1>
			uint8_t readDutyC2 = R_eeprom(1);
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	0e 94 11 01 	call	0x222	; 0x222 <R_eeprom>
			updateDutyCA2(readDutyC2);
 31a:	0e 94 39 03 	call	0x672	; 0x672 <updateDutyCA2>
			uint8_t readDutyC3 = R_eeprom(2);
 31e:	82 e0       	ldi	r24, 0x02	; 2
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	0e 94 11 01 	call	0x222	; 0x222 <R_eeprom>
			updateDutyCB1(readDutyC3);
 326:	0e 94 99 04 	call	0x932	; 0x932 <updateDutyCB1>
			uint8_t readDutyC4 = R_eeprom(3);
 32a:	83 e0       	ldi	r24, 0x03	; 3
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	0e 94 11 01 	call	0x222	; 0x222 <R_eeprom>
			updateDutyCB2(readDutyC4);
 332:	0e 94 6f 03 	call	0x6de	; 0x6de <updateDutyCB2>
 336:	43 c0       	rjmp	.+134    	; 0x3be <__vector_5+0x172>
		}
	}
	else if ((PIND & (1 << PIND2)) == 0) {
 338:	4a 99       	sbic	0x09, 2	; 9
 33a:	41 c0       	rjmp	.+130    	; 0x3be <__vector_5+0x172>
		if (Estado == 0) {
 33c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 340:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 344:	89 2b       	or	r24, r25
 346:	d9 f4       	brne	.+54     	; 0x37e <__vector_5+0x132>
			PORTC = (1 << PC2);
 348:	84 e0       	ldi	r24, 0x04	; 4
 34a:	88 b9       	out	0x08, r24	; 8
			W_eeprom(12, DutyC1);
 34c:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <DutyC1>
 350:	8c e0       	ldi	r24, 0x0C	; 12
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	0e 94 1a 01 	call	0x234	; 0x234 <W_eeprom>
			W_eeprom(13, DutyC2);
 358:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <DutyC2>
 35c:	8d e0       	ldi	r24, 0x0D	; 13
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	0e 94 1a 01 	call	0x234	; 0x234 <W_eeprom>
			W_eeprom(14, DutyC3);
 364:	60 91 03 01 	lds	r22, 0x0103	; 0x800103 <DutyC3>
 368:	8e e0       	ldi	r24, 0x0E	; 14
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	0e 94 1a 01 	call	0x234	; 0x234 <W_eeprom>
			W_eeprom(15, DutyC4);
 370:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <DutyC4>
 374:	8f e0       	ldi	r24, 0x0F	; 15
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	0e 94 1a 01 	call	0x234	; 0x234 <W_eeprom>
 37c:	20 c0       	rjmp	.+64     	; 0x3be <__vector_5+0x172>
			} else if (Estado == 1) {
 37e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 382:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 386:	01 97       	sbiw	r24, 0x01	; 1
 388:	d1 f4       	brne	.+52     	; 0x3be <__vector_5+0x172>
			PORTC = (1 << PC2);
 38a:	84 e0       	ldi	r24, 0x04	; 4
 38c:	88 b9       	out	0x08, r24	; 8
			uint8_t readDutyC1 = R_eeprom(12);
 38e:	8c e0       	ldi	r24, 0x0C	; 12
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	0e 94 11 01 	call	0x222	; 0x222 <R_eeprom>
			updateDutyCA1(readDutyC1);
 396:	0e 94 5e 04 	call	0x8bc	; 0x8bc <updateDutyCA1>
			uint8_t readDutyC2 = R_eeprom(13);
 39a:	8d e0       	ldi	r24, 0x0D	; 13
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	0e 94 11 01 	call	0x222	; 0x222 <R_eeprom>
			updateDutyCA2(readDutyC2);
 3a2:	0e 94 39 03 	call	0x672	; 0x672 <updateDutyCA2>
			uint8_t readDutyC3 = R_eeprom(14);
 3a6:	8e e0       	ldi	r24, 0x0E	; 14
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	0e 94 11 01 	call	0x222	; 0x222 <R_eeprom>
			updateDutyCB1(readDutyC3);
 3ae:	0e 94 99 04 	call	0x932	; 0x932 <updateDutyCB1>
			uint8_t readDutyC4 = R_eeprom(15);
 3b2:	8f e0       	ldi	r24, 0x0F	; 15
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	0e 94 11 01 	call	0x222	; 0x222 <R_eeprom>
			updateDutyCB2(readDutyC4);
 3ba:	0e 94 6f 03 	call	0x6de	; 0x6de <updateDutyCB2>
		}
	}
}
 3be:	ff 91       	pop	r31
 3c0:	ef 91       	pop	r30
 3c2:	bf 91       	pop	r27
 3c4:	af 91       	pop	r26
 3c6:	9f 91       	pop	r25
 3c8:	8f 91       	pop	r24
 3ca:	7f 91       	pop	r23
 3cc:	6f 91       	pop	r22
 3ce:	5f 91       	pop	r21
 3d0:	4f 91       	pop	r20
 3d2:	3f 91       	pop	r19
 3d4:	2f 91       	pop	r18
 3d6:	0f 90       	pop	r0
 3d8:	0f be       	out	0x3f, r0	; 63
 3da:	0f 90       	pop	r0
 3dc:	1f 90       	pop	r1
 3de:	18 95       	reti

000003e0 <__vector_3>:

ISR(PCINT0_vect) {
 3e0:	1f 92       	push	r1
 3e2:	0f 92       	push	r0
 3e4:	0f b6       	in	r0, 0x3f	; 63
 3e6:	0f 92       	push	r0
 3e8:	11 24       	eor	r1, r1
 3ea:	2f 93       	push	r18
 3ec:	3f 93       	push	r19
 3ee:	4f 93       	push	r20
 3f0:	5f 93       	push	r21
 3f2:	6f 93       	push	r22
 3f4:	7f 93       	push	r23
 3f6:	8f 93       	push	r24
 3f8:	9f 93       	push	r25
 3fa:	af 93       	push	r26
 3fc:	bf 93       	push	r27
 3fe:	ef 93       	push	r30
 400:	ff 93       	push	r31
	if ((PINB & (1 << PINB0)) == 0) {
 402:	18 99       	sbic	0x03, 0	; 3
 404:	41 c0       	rjmp	.+130    	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
		PORTC = (1 << PC2);
 406:	84 e0       	ldi	r24, 0x04	; 4
 408:	88 b9       	out	0x08, r24	; 8
		if (Estado == 0) {
 40a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 40e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 412:	89 2b       	or	r24, r25
 414:	c9 f4       	brne	.+50     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
			W_eeprom(4, DutyC1);
 416:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <DutyC1>
 41a:	84 e0       	ldi	r24, 0x04	; 4
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	0e 94 1a 01 	call	0x234	; 0x234 <W_eeprom>
			W_eeprom(5, DutyC2);
 422:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <DutyC2>
 426:	85 e0       	ldi	r24, 0x05	; 5
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	0e 94 1a 01 	call	0x234	; 0x234 <W_eeprom>
			W_eeprom(6, DutyC3);
 42e:	60 91 03 01 	lds	r22, 0x0103	; 0x800103 <DutyC3>
 432:	86 e0       	ldi	r24, 0x06	; 6
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	0e 94 1a 01 	call	0x234	; 0x234 <W_eeprom>
			W_eeprom(7, DutyC4);
 43a:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <DutyC4>
 43e:	87 e0       	ldi	r24, 0x07	; 7
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	0e 94 1a 01 	call	0x234	; 0x234 <W_eeprom>
 446:	61 c0       	rjmp	.+194    	; 0x50a <__EEPROM_REGION_LENGTH__+0x10a>
			} else if (Estado == 1) {
 448:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 44c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 450:	01 97       	sbiw	r24, 0x01	; 1
 452:	09 f0       	breq	.+2      	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 454:	5a c0       	rjmp	.+180    	; 0x50a <__EEPROM_REGION_LENGTH__+0x10a>
			uint8_t readDutyC1 = R_eeprom(4);
 456:	84 e0       	ldi	r24, 0x04	; 4
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	0e 94 11 01 	call	0x222	; 0x222 <R_eeprom>
			updateDutyCA1(readDutyC1);
 45e:	0e 94 5e 04 	call	0x8bc	; 0x8bc <updateDutyCA1>
			uint8_t readDutyC2 = R_eeprom(5);
 462:	85 e0       	ldi	r24, 0x05	; 5
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	0e 94 11 01 	call	0x222	; 0x222 <R_eeprom>
			updateDutyCA2(readDutyC2);
 46a:	0e 94 39 03 	call	0x672	; 0x672 <updateDutyCA2>
			uint8_t readDutyC3 = R_eeprom(6);
 46e:	86 e0       	ldi	r24, 0x06	; 6
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	0e 94 11 01 	call	0x222	; 0x222 <R_eeprom>
			updateDutyCB1(readDutyC3);
 476:	0e 94 99 04 	call	0x932	; 0x932 <updateDutyCB1>
			uint8_t readDutyC4 = R_eeprom(7);
 47a:	87 e0       	ldi	r24, 0x07	; 7
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	0e 94 11 01 	call	0x222	; 0x222 <R_eeprom>
			updateDutyCB2(readDutyC4);
 482:	0e 94 6f 03 	call	0x6de	; 0x6de <updateDutyCB2>
 486:	41 c0       	rjmp	.+130    	; 0x50a <__EEPROM_REGION_LENGTH__+0x10a>
		}
	}
	else if ((PINB & (1 << PINB4)) == 0) {
 488:	1c 99       	sbic	0x03, 4	; 3
 48a:	3f c0       	rjmp	.+126    	; 0x50a <__EEPROM_REGION_LENGTH__+0x10a>
		PORTC = (1 << PC2);
 48c:	84 e0       	ldi	r24, 0x04	; 4
 48e:	88 b9       	out	0x08, r24	; 8
		
		if (Estado == 0) {
 490:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 494:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 498:	89 2b       	or	r24, r25
 49a:	c9 f4       	brne	.+50     	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
			W_eeprom(8, DutyC1);
 49c:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <DutyC1>
 4a0:	88 e0       	ldi	r24, 0x08	; 8
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	0e 94 1a 01 	call	0x234	; 0x234 <W_eeprom>
			W_eeprom(9, DutyC2);
 4a8:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <DutyC2>
 4ac:	89 e0       	ldi	r24, 0x09	; 9
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	0e 94 1a 01 	call	0x234	; 0x234 <W_eeprom>
			W_eeprom(10, DutyC3);
 4b4:	60 91 03 01 	lds	r22, 0x0103	; 0x800103 <DutyC3>
 4b8:	8a e0       	ldi	r24, 0x0A	; 10
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	0e 94 1a 01 	call	0x234	; 0x234 <W_eeprom>
			W_eeprom(11, DutyC4);
 4c0:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <DutyC4>
 4c4:	8b e0       	ldi	r24, 0x0B	; 11
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	0e 94 1a 01 	call	0x234	; 0x234 <W_eeprom>
 4cc:	1e c0       	rjmp	.+60     	; 0x50a <__EEPROM_REGION_LENGTH__+0x10a>
			} else if (Estado == 1) {
 4ce:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 4d2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 4d6:	01 97       	sbiw	r24, 0x01	; 1
 4d8:	c1 f4       	brne	.+48     	; 0x50a <__EEPROM_REGION_LENGTH__+0x10a>
			uint8_t readDutyC1 = R_eeprom(8);
 4da:	88 e0       	ldi	r24, 0x08	; 8
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	0e 94 11 01 	call	0x222	; 0x222 <R_eeprom>
			updateDutyCA1(readDutyC1);
 4e2:	0e 94 5e 04 	call	0x8bc	; 0x8bc <updateDutyCA1>
			uint8_t readDutyC2 = R_eeprom(9);
 4e6:	89 e0       	ldi	r24, 0x09	; 9
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	0e 94 11 01 	call	0x222	; 0x222 <R_eeprom>
			updateDutyCA2(readDutyC2);
 4ee:	0e 94 39 03 	call	0x672	; 0x672 <updateDutyCA2>
			uint8_t readDutyC3 = R_eeprom(10);
 4f2:	8a e0       	ldi	r24, 0x0A	; 10
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	0e 94 11 01 	call	0x222	; 0x222 <R_eeprom>
			updateDutyCB1(readDutyC3);
 4fa:	0e 94 99 04 	call	0x932	; 0x932 <updateDutyCB1>
			uint8_t readDutyC4 = R_eeprom(11);
 4fe:	8b e0       	ldi	r24, 0x0B	; 11
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	0e 94 11 01 	call	0x222	; 0x222 <R_eeprom>
			updateDutyCB2(readDutyC4);
 506:	0e 94 6f 03 	call	0x6de	; 0x6de <updateDutyCB2>
		}
	}
	
}
 50a:	ff 91       	pop	r31
 50c:	ef 91       	pop	r30
 50e:	bf 91       	pop	r27
 510:	af 91       	pop	r26
 512:	9f 91       	pop	r25
 514:	8f 91       	pop	r24
 516:	7f 91       	pop	r23
 518:	6f 91       	pop	r22
 51a:	5f 91       	pop	r21
 51c:	4f 91       	pop	r20
 51e:	3f 91       	pop	r19
 520:	2f 91       	pop	r18
 522:	0f 90       	pop	r0
 524:	0f be       	out	0x3f, r0	; 63
 526:	0f 90       	pop	r0
 528:	1f 90       	pop	r1
 52a:	18 95       	reti

0000052c <map1>:
#include "PWM2.h"

float map1(float x, float in_min, float in_max, float out_min, float out_max){
 52c:	4f 92       	push	r4
 52e:	5f 92       	push	r5
 530:	6f 92       	push	r6
 532:	7f 92       	push	r7
 534:	af 92       	push	r10
 536:	bf 92       	push	r11
 538:	cf 92       	push	r12
 53a:	df 92       	push	r13
 53c:	ef 92       	push	r14
 53e:	ff 92       	push	r15
 540:	0f 93       	push	r16
 542:	1f 93       	push	r17
 544:	cf 93       	push	r28
 546:	df 93       	push	r29
 548:	cd b7       	in	r28, 0x3d	; 61
 54a:	de b7       	in	r29, 0x3e	; 62
 54c:	28 97       	sbiw	r28, 0x08	; 8
 54e:	0f b6       	in	r0, 0x3f	; 63
 550:	f8 94       	cli
 552:	de bf       	out	0x3e, r29	; 62
 554:	0f be       	out	0x3f, r0	; 63
 556:	cd bf       	out	0x3d, r28	; 61
 558:	29 01       	movw	r4, r18
 55a:	3a 01       	movw	r6, r20
 55c:	ed 82       	std	Y+5, r14	; 0x05
 55e:	fe 82       	std	Y+6, r15	; 0x06
 560:	0f 83       	std	Y+7, r16	; 0x07
 562:	18 87       	std	Y+8, r17	; 0x08
	return ((x - in_min)*(out_max - out_min)/(in_max - in_min)) + out_min;
 564:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__subsf3>
 568:	69 83       	std	Y+1, r22	; 0x01
 56a:	7a 83       	std	Y+2, r23	; 0x02
 56c:	8b 83       	std	Y+3, r24	; 0x03
 56e:	9c 83       	std	Y+4, r25	; 0x04
 570:	a6 01       	movw	r20, r12
 572:	95 01       	movw	r18, r10
 574:	69 8d       	ldd	r22, Y+25	; 0x19
 576:	7a 8d       	ldd	r23, Y+26	; 0x1a
 578:	8b 8d       	ldd	r24, Y+27	; 0x1b
 57a:	9c 8d       	ldd	r25, Y+28	; 0x1c
 57c:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__subsf3>
 580:	9b 01       	movw	r18, r22
 582:	ac 01       	movw	r20, r24
 584:	69 81       	ldd	r22, Y+1	; 0x01
 586:	7a 81       	ldd	r23, Y+2	; 0x02
 588:	8b 81       	ldd	r24, Y+3	; 0x03
 58a:	9c 81       	ldd	r25, Y+4	; 0x04
 58c:	0e 94 6d 06 	call	0xcda	; 0xcda <__mulsf3>
 590:	69 83       	std	Y+1, r22	; 0x01
 592:	7a 83       	std	Y+2, r23	; 0x02
 594:	8b 83       	std	Y+3, r24	; 0x03
 596:	9c 83       	std	Y+4, r25	; 0x04
 598:	a3 01       	movw	r20, r6
 59a:	92 01       	movw	r18, r4
 59c:	c8 01       	movw	r24, r16
 59e:	b7 01       	movw	r22, r14
 5a0:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__subsf3>
 5a4:	9b 01       	movw	r18, r22
 5a6:	ac 01       	movw	r20, r24
 5a8:	69 81       	ldd	r22, Y+1	; 0x01
 5aa:	7a 81       	ldd	r23, Y+2	; 0x02
 5ac:	8b 81       	ldd	r24, Y+3	; 0x03
 5ae:	9c 81       	ldd	r25, Y+4	; 0x04
 5b0:	0e 94 3e 05 	call	0xa7c	; 0xa7c <__divsf3>
 5b4:	9b 01       	movw	r18, r22
 5b6:	ac 01       	movw	r20, r24
 5b8:	c6 01       	movw	r24, r12
 5ba:	b5 01       	movw	r22, r10
 5bc:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__addsf3>
}
 5c0:	28 96       	adiw	r28, 0x08	; 8
 5c2:	0f b6       	in	r0, 0x3f	; 63
 5c4:	f8 94       	cli
 5c6:	de bf       	out	0x3e, r29	; 62
 5c8:	0f be       	out	0x3f, r0	; 63
 5ca:	cd bf       	out	0x3d, r28	; 61
 5cc:	df 91       	pop	r29
 5ce:	cf 91       	pop	r28
 5d0:	1f 91       	pop	r17
 5d2:	0f 91       	pop	r16
 5d4:	ff 90       	pop	r15
 5d6:	ef 90       	pop	r14
 5d8:	df 90       	pop	r13
 5da:	cf 90       	pop	r12
 5dc:	bf 90       	pop	r11
 5de:	af 90       	pop	r10
 5e0:	7f 90       	pop	r7
 5e2:	6f 90       	pop	r6
 5e4:	5f 90       	pop	r5
 5e6:	4f 90       	pop	r4
 5e8:	08 95       	ret

000005ea <initPWM2A>:

void initPWM2A(uint8_t inverted, uint16_t prescaler){
	DDRB |= (1 << DDB3); 
 5ea:	94 b1       	in	r25, 0x04	; 4
 5ec:	98 60       	ori	r25, 0x08	; 8
 5ee:	94 b9       	out	0x04, r25	; 4
	TCCR2A |= (1 << WGM21)|(1 << WGM20); //PWM MODO FAST
 5f0:	e0 eb       	ldi	r30, 0xB0	; 176
 5f2:	f0 e0       	ldi	r31, 0x00	; 0
 5f4:	90 81       	ld	r25, Z
 5f6:	93 60       	ori	r25, 0x03	; 3
 5f8:	90 83       	st	Z, r25

	if (inverted) {
 5fa:	88 23       	and	r24, r24
 5fc:	21 f0       	breq	.+8      	; 0x606 <initPWM2A+0x1c>
		TCCR2A |= (1 << COM2A1)|(1 << COM2A0);//PWM INVERTIDO
 5fe:	80 81       	ld	r24, Z
 600:	80 6c       	ori	r24, 0xC0	; 192
 602:	80 83       	st	Z, r24
 604:	05 c0       	rjmp	.+10     	; 0x610 <initPWM2A+0x26>
		} else	 {
		TCCR2A |= (1 << COM2A1);//PWM NO INVERTIDO
 606:	e0 eb       	ldi	r30, 0xB0	; 176
 608:	f0 e0       	ldi	r31, 0x00	; 0
 60a:	80 81       	ld	r24, Z
 60c:	80 68       	ori	r24, 0x80	; 128
 60e:	80 83       	st	Z, r24
	}

	if (prescaler == 1024) {
 610:	61 15       	cp	r22, r1
 612:	74 40       	sbci	r23, 0x04	; 4
 614:	31 f4       	brne	.+12     	; 0x622 <initPWM2A+0x38>
		TCCR2B |= (1 << CS22)|(1 << CS21)|(1 << CS20);
 616:	e1 eb       	ldi	r30, 0xB1	; 177
 618:	f0 e0       	ldi	r31, 0x00	; 0
 61a:	80 81       	ld	r24, Z
 61c:	87 60       	ori	r24, 0x07	; 7
 61e:	80 83       	st	Z, r24
 620:	08 95       	ret
		} else {
		TCCR2B |= (1 << CS20);
 622:	e1 eb       	ldi	r30, 0xB1	; 177
 624:	f0 e0       	ldi	r31, 0x00	; 0
 626:	80 81       	ld	r24, Z
 628:	81 60       	ori	r24, 0x01	; 1
 62a:	80 83       	st	Z, r24
 62c:	08 95       	ret

0000062e <initPWM2B>:
	}
}

void initPWM2B(uint8_t inverted, uint16_t prescaler){
	DDRD |= (1 << DDD3); //PD6 COMO SALIDA
 62e:	9a b1       	in	r25, 0x0a	; 10
 630:	98 60       	ori	r25, 0x08	; 8
 632:	9a b9       	out	0x0a, r25	; 10
	TCCR2A |= (1 << WGM21)|(1 << WGM20); //PWM MODO FAST
 634:	e0 eb       	ldi	r30, 0xB0	; 176
 636:	f0 e0       	ldi	r31, 0x00	; 0
 638:	90 81       	ld	r25, Z
 63a:	93 60       	ori	r25, 0x03	; 3
 63c:	90 83       	st	Z, r25

	if (inverted) {
 63e:	88 23       	and	r24, r24
 640:	21 f0       	breq	.+8      	; 0x64a <initPWM2B+0x1c>
		TCCR2A |= (1 << COM2B1)|(1 << COM2B0);//PWM INVERTIDO
 642:	80 81       	ld	r24, Z
 644:	80 63       	ori	r24, 0x30	; 48
 646:	80 83       	st	Z, r24
 648:	05 c0       	rjmp	.+10     	; 0x654 <initPWM2B+0x26>
		} else	 {
		TCCR2A |= (1 << COM2B1);//PWM NO INVERTIDO
 64a:	e0 eb       	ldi	r30, 0xB0	; 176
 64c:	f0 e0       	ldi	r31, 0x00	; 0
 64e:	80 81       	ld	r24, Z
 650:	80 62       	ori	r24, 0x20	; 32
 652:	80 83       	st	Z, r24
	}

	if (prescaler == 1024) {
 654:	61 15       	cp	r22, r1
 656:	74 40       	sbci	r23, 0x04	; 4
 658:	31 f4       	brne	.+12     	; 0x666 <initPWM2B+0x38>
		TCCR2B |= (1 << CS22)|(1 << CS21)|(1 << CS20);
 65a:	e1 eb       	ldi	r30, 0xB1	; 177
 65c:	f0 e0       	ldi	r31, 0x00	; 0
 65e:	80 81       	ld	r24, Z
 660:	87 60       	ori	r24, 0x07	; 7
 662:	80 83       	st	Z, r24
 664:	08 95       	ret
		} else {
		TCCR2B |= (1 << CS20);
 666:	e1 eb       	ldi	r30, 0xB1	; 177
 668:	f0 e0       	ldi	r31, 0x00	; 0
 66a:	80 81       	ld	r24, Z
 66c:	81 60       	ori	r24, 0x01	; 1
 66e:	80 83       	st	Z, r24
 670:	08 95       	ret

00000672 <updateDutyCA2>:
	}
}

void updateDutyCA2(uint8_t duty){
 672:	af 92       	push	r10
 674:	bf 92       	push	r11
 676:	cf 92       	push	r12
 678:	df 92       	push	r13
 67a:	ef 92       	push	r14
 67c:	ff 92       	push	r15
 67e:	0f 93       	push	r16
 680:	1f 93       	push	r17
	OCR2A = map1(duty,0,255,6,36);
 682:	68 2f       	mov	r22, r24
 684:	70 e0       	ldi	r23, 0x00	; 0
 686:	80 e0       	ldi	r24, 0x00	; 0
 688:	90 e0       	ldi	r25, 0x00	; 0
 68a:	0e 94 df 05 	call	0xbbe	; 0xbbe <__floatunsisf>
 68e:	22 e4       	ldi	r18, 0x42	; 66
 690:	2f 93       	push	r18
 692:	20 e1       	ldi	r18, 0x10	; 16
 694:	2f 93       	push	r18
 696:	1f 92       	push	r1
 698:	1f 92       	push	r1
 69a:	0f 2e       	mov	r0, r31
 69c:	a1 2c       	mov	r10, r1
 69e:	b1 2c       	mov	r11, r1
 6a0:	f0 ec       	ldi	r31, 0xC0	; 192
 6a2:	cf 2e       	mov	r12, r31
 6a4:	f0 e4       	ldi	r31, 0x40	; 64
 6a6:	df 2e       	mov	r13, r31
 6a8:	f0 2d       	mov	r31, r0
 6aa:	e1 2c       	mov	r14, r1
 6ac:	f1 2c       	mov	r15, r1
 6ae:	0f e7       	ldi	r16, 0x7F	; 127
 6b0:	13 e4       	ldi	r17, 0x43	; 67
 6b2:	20 e0       	ldi	r18, 0x00	; 0
 6b4:	30 e0       	ldi	r19, 0x00	; 0
 6b6:	a9 01       	movw	r20, r18
 6b8:	0e 94 96 02 	call	0x52c	; 0x52c <map1>
 6bc:	0f 90       	pop	r0
 6be:	0f 90       	pop	r0
 6c0:	0f 90       	pop	r0
 6c2:	0f 90       	pop	r0
 6c4:	0e 94 b0 05 	call	0xb60	; 0xb60 <__fixunssfsi>
 6c8:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
}
 6cc:	1f 91       	pop	r17
 6ce:	0f 91       	pop	r16
 6d0:	ff 90       	pop	r15
 6d2:	ef 90       	pop	r14
 6d4:	df 90       	pop	r13
 6d6:	cf 90       	pop	r12
 6d8:	bf 90       	pop	r11
 6da:	af 90       	pop	r10
 6dc:	08 95       	ret

000006de <updateDutyCB2>:

void updateDutyCB2(uint8_t duty){
 6de:	af 92       	push	r10
 6e0:	bf 92       	push	r11
 6e2:	cf 92       	push	r12
 6e4:	df 92       	push	r13
 6e6:	ef 92       	push	r14
 6e8:	ff 92       	push	r15
 6ea:	0f 93       	push	r16
 6ec:	1f 93       	push	r17
	OCR2B = map1(duty,0,255,6,36);
 6ee:	68 2f       	mov	r22, r24
 6f0:	70 e0       	ldi	r23, 0x00	; 0
 6f2:	80 e0       	ldi	r24, 0x00	; 0
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	0e 94 df 05 	call	0xbbe	; 0xbbe <__floatunsisf>
 6fa:	22 e4       	ldi	r18, 0x42	; 66
 6fc:	2f 93       	push	r18
 6fe:	20 e1       	ldi	r18, 0x10	; 16
 700:	2f 93       	push	r18
 702:	1f 92       	push	r1
 704:	1f 92       	push	r1
 706:	0f 2e       	mov	r0, r31
 708:	a1 2c       	mov	r10, r1
 70a:	b1 2c       	mov	r11, r1
 70c:	f0 ec       	ldi	r31, 0xC0	; 192
 70e:	cf 2e       	mov	r12, r31
 710:	f0 e4       	ldi	r31, 0x40	; 64
 712:	df 2e       	mov	r13, r31
 714:	f0 2d       	mov	r31, r0
 716:	e1 2c       	mov	r14, r1
 718:	f1 2c       	mov	r15, r1
 71a:	0f e7       	ldi	r16, 0x7F	; 127
 71c:	13 e4       	ldi	r17, 0x43	; 67
 71e:	20 e0       	ldi	r18, 0x00	; 0
 720:	30 e0       	ldi	r19, 0x00	; 0
 722:	a9 01       	movw	r20, r18
 724:	0e 94 96 02 	call	0x52c	; 0x52c <map1>
 728:	0f 90       	pop	r0
 72a:	0f 90       	pop	r0
 72c:	0f 90       	pop	r0
 72e:	0f 90       	pop	r0
 730:	0e 94 b0 05 	call	0xb60	; 0xb60 <__fixunssfsi>
 734:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
}
 738:	1f 91       	pop	r17
 73a:	0f 91       	pop	r16
 73c:	ff 90       	pop	r15
 73e:	ef 90       	pop	r14
 740:	df 90       	pop	r13
 742:	cf 90       	pop	r12
 744:	bf 90       	pop	r11
 746:	af 90       	pop	r10
 748:	08 95       	ret

0000074a <map>:

#include "PWM1.h"

float map(float x, float in_min, float in_max, float out_min, float out_max){
 74a:	4f 92       	push	r4
 74c:	5f 92       	push	r5
 74e:	6f 92       	push	r6
 750:	7f 92       	push	r7
 752:	af 92       	push	r10
 754:	bf 92       	push	r11
 756:	cf 92       	push	r12
 758:	df 92       	push	r13
 75a:	ef 92       	push	r14
 75c:	ff 92       	push	r15
 75e:	0f 93       	push	r16
 760:	1f 93       	push	r17
 762:	cf 93       	push	r28
 764:	df 93       	push	r29
 766:	cd b7       	in	r28, 0x3d	; 61
 768:	de b7       	in	r29, 0x3e	; 62
 76a:	28 97       	sbiw	r28, 0x08	; 8
 76c:	0f b6       	in	r0, 0x3f	; 63
 76e:	f8 94       	cli
 770:	de bf       	out	0x3e, r29	; 62
 772:	0f be       	out	0x3f, r0	; 63
 774:	cd bf       	out	0x3d, r28	; 61
 776:	29 01       	movw	r4, r18
 778:	3a 01       	movw	r6, r20
 77a:	ed 82       	std	Y+5, r14	; 0x05
 77c:	fe 82       	std	Y+6, r15	; 0x06
 77e:	0f 83       	std	Y+7, r16	; 0x07
 780:	18 87       	std	Y+8, r17	; 0x08
	return ((x - in_min)*(out_max - out_min)/(in_max - in_min)) + out_min;
 782:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__subsf3>
 786:	69 83       	std	Y+1, r22	; 0x01
 788:	7a 83       	std	Y+2, r23	; 0x02
 78a:	8b 83       	std	Y+3, r24	; 0x03
 78c:	9c 83       	std	Y+4, r25	; 0x04
 78e:	a6 01       	movw	r20, r12
 790:	95 01       	movw	r18, r10
 792:	69 8d       	ldd	r22, Y+25	; 0x19
 794:	7a 8d       	ldd	r23, Y+26	; 0x1a
 796:	8b 8d       	ldd	r24, Y+27	; 0x1b
 798:	9c 8d       	ldd	r25, Y+28	; 0x1c
 79a:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__subsf3>
 79e:	9b 01       	movw	r18, r22
 7a0:	ac 01       	movw	r20, r24
 7a2:	69 81       	ldd	r22, Y+1	; 0x01
 7a4:	7a 81       	ldd	r23, Y+2	; 0x02
 7a6:	8b 81       	ldd	r24, Y+3	; 0x03
 7a8:	9c 81       	ldd	r25, Y+4	; 0x04
 7aa:	0e 94 6d 06 	call	0xcda	; 0xcda <__mulsf3>
 7ae:	69 83       	std	Y+1, r22	; 0x01
 7b0:	7a 83       	std	Y+2, r23	; 0x02
 7b2:	8b 83       	std	Y+3, r24	; 0x03
 7b4:	9c 83       	std	Y+4, r25	; 0x04
 7b6:	a3 01       	movw	r20, r6
 7b8:	92 01       	movw	r18, r4
 7ba:	c8 01       	movw	r24, r16
 7bc:	b7 01       	movw	r22, r14
 7be:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__subsf3>
 7c2:	9b 01       	movw	r18, r22
 7c4:	ac 01       	movw	r20, r24
 7c6:	69 81       	ldd	r22, Y+1	; 0x01
 7c8:	7a 81       	ldd	r23, Y+2	; 0x02
 7ca:	8b 81       	ldd	r24, Y+3	; 0x03
 7cc:	9c 81       	ldd	r25, Y+4	; 0x04
 7ce:	0e 94 3e 05 	call	0xa7c	; 0xa7c <__divsf3>
 7d2:	9b 01       	movw	r18, r22
 7d4:	ac 01       	movw	r20, r24
 7d6:	c6 01       	movw	r24, r12
 7d8:	b5 01       	movw	r22, r10
 7da:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__addsf3>
}
 7de:	28 96       	adiw	r28, 0x08	; 8
 7e0:	0f b6       	in	r0, 0x3f	; 63
 7e2:	f8 94       	cli
 7e4:	de bf       	out	0x3e, r29	; 62
 7e6:	0f be       	out	0x3f, r0	; 63
 7e8:	cd bf       	out	0x3d, r28	; 61
 7ea:	df 91       	pop	r29
 7ec:	cf 91       	pop	r28
 7ee:	1f 91       	pop	r17
 7f0:	0f 91       	pop	r16
 7f2:	ff 90       	pop	r15
 7f4:	ef 90       	pop	r14
 7f6:	df 90       	pop	r13
 7f8:	cf 90       	pop	r12
 7fa:	bf 90       	pop	r11
 7fc:	af 90       	pop	r10
 7fe:	7f 90       	pop	r7
 800:	6f 90       	pop	r6
 802:	5f 90       	pop	r5
 804:	4f 90       	pop	r4
 806:	08 95       	ret

00000808 <initPWM1A>:

void initPWM1A(uint8_t inverted, uint16_t prescaler, uint16_t top){
	DDRB |= (1 << DDB1); 
 808:	94 b1       	in	r25, 0x04	; 4
 80a:	92 60       	ori	r25, 0x02	; 2
 80c:	94 b9       	out	0x04, r25	; 4
	TCCR1A |= (1 << WGM11);				 //PWM MODO FAST ICR1
 80e:	e0 e8       	ldi	r30, 0x80	; 128
 810:	f0 e0       	ldi	r31, 0x00	; 0
 812:	90 81       	ld	r25, Z
 814:	92 60       	ori	r25, 0x02	; 2
 816:	90 83       	st	Z, r25
	TCCR1B |= (1 << WGM13)|(1 << WGM12); //PWM MODO FAST ICR1
 818:	e1 e8       	ldi	r30, 0x81	; 129
 81a:	f0 e0       	ldi	r31, 0x00	; 0
 81c:	90 81       	ld	r25, Z
 81e:	98 61       	ori	r25, 0x18	; 24
 820:	90 83       	st	Z, r25
	ICR1 = top;
 822:	50 93 87 00 	sts	0x0087, r21	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 826:	40 93 86 00 	sts	0x0086, r20	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	
	if (inverted) {
 82a:	88 23       	and	r24, r24
 82c:	31 f0       	breq	.+12     	; 0x83a <initPWM1A+0x32>
		TCCR1A |= (1 << COM1A1)|(1 << COM1A0);//PWM INVERTIDO
 82e:	e0 e8       	ldi	r30, 0x80	; 128
 830:	f0 e0       	ldi	r31, 0x00	; 0
 832:	80 81       	ld	r24, Z
 834:	80 6c       	ori	r24, 0xC0	; 192
 836:	80 83       	st	Z, r24
 838:	05 c0       	rjmp	.+10     	; 0x844 <initPWM1A+0x3c>
		} else	 {
		TCCR1A |= (1 << COM1A1);//PWM NO INVERTIDO
 83a:	e0 e8       	ldi	r30, 0x80	; 128
 83c:	f0 e0       	ldi	r31, 0x00	; 0
 83e:	80 81       	ld	r24, Z
 840:	80 68       	ori	r24, 0x80	; 128
 842:	80 83       	st	Z, r24
	}

	if (prescaler == 8) {
 844:	68 30       	cpi	r22, 0x08	; 8
 846:	71 05       	cpc	r23, r1
 848:	31 f4       	brne	.+12     	; 0x856 <initPWM1A+0x4e>
		TCCR1B |= (1 << CS11);
 84a:	e1 e8       	ldi	r30, 0x81	; 129
 84c:	f0 e0       	ldi	r31, 0x00	; 0
 84e:	80 81       	ld	r24, Z
 850:	82 60       	ori	r24, 0x02	; 2
 852:	80 83       	st	Z, r24
 854:	08 95       	ret
		} else {
		TCCR1B |= (1 << CS12);
 856:	e1 e8       	ldi	r30, 0x81	; 129
 858:	f0 e0       	ldi	r31, 0x00	; 0
 85a:	80 81       	ld	r24, Z
 85c:	84 60       	ori	r24, 0x04	; 4
 85e:	80 83       	st	Z, r24
 860:	08 95       	ret

00000862 <initPWM1B>:
	}
}

void initPWM1B(uint8_t inverted, uint16_t prescaler, uint16_t top){
	DDRB |= (1 << DDB2); //PB2 COMO SALIDA
 862:	94 b1       	in	r25, 0x04	; 4
 864:	94 60       	ori	r25, 0x04	; 4
 866:	94 b9       	out	0x04, r25	; 4
	TCCR1A |= (1 << WGM11);				 //PWM MODO FAST ICR1
 868:	e0 e8       	ldi	r30, 0x80	; 128
 86a:	f0 e0       	ldi	r31, 0x00	; 0
 86c:	90 81       	ld	r25, Z
 86e:	92 60       	ori	r25, 0x02	; 2
 870:	90 83       	st	Z, r25
	TCCR1B |= (1 << WGM13)|(1 << WGM12); //PWM MODO FAST ICR1
 872:	e1 e8       	ldi	r30, 0x81	; 129
 874:	f0 e0       	ldi	r31, 0x00	; 0
 876:	90 81       	ld	r25, Z
 878:	98 61       	ori	r25, 0x18	; 24
 87a:	90 83       	st	Z, r25
	ICR1 = top;
 87c:	50 93 87 00 	sts	0x0087, r21	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 880:	40 93 86 00 	sts	0x0086, r20	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	
	if (inverted) {
 884:	88 23       	and	r24, r24
 886:	31 f0       	breq	.+12     	; 0x894 <initPWM1B+0x32>
		TCCR1A |= (1 << COM1B1)|(1 << COM1B0);//PWM INVERTIDO
 888:	e0 e8       	ldi	r30, 0x80	; 128
 88a:	f0 e0       	ldi	r31, 0x00	; 0
 88c:	80 81       	ld	r24, Z
 88e:	80 63       	ori	r24, 0x30	; 48
 890:	80 83       	st	Z, r24
 892:	05 c0       	rjmp	.+10     	; 0x89e <initPWM1B+0x3c>
		} else	 {
		TCCR1A |= (1 << COM1B1);//PWM NO INVERTIDO
 894:	e0 e8       	ldi	r30, 0x80	; 128
 896:	f0 e0       	ldi	r31, 0x00	; 0
 898:	80 81       	ld	r24, Z
 89a:	80 62       	ori	r24, 0x20	; 32
 89c:	80 83       	st	Z, r24
	}

	if (prescaler == 8) {
 89e:	68 30       	cpi	r22, 0x08	; 8
 8a0:	71 05       	cpc	r23, r1
 8a2:	31 f4       	brne	.+12     	; 0x8b0 <initPWM1B+0x4e>
		TCCR1B |= (1 << CS11);
 8a4:	e1 e8       	ldi	r30, 0x81	; 129
 8a6:	f0 e0       	ldi	r31, 0x00	; 0
 8a8:	80 81       	ld	r24, Z
 8aa:	82 60       	ori	r24, 0x02	; 2
 8ac:	80 83       	st	Z, r24
 8ae:	08 95       	ret
		} else {
		TCCR1B |= (1 << CS12);
 8b0:	e1 e8       	ldi	r30, 0x81	; 129
 8b2:	f0 e0       	ldi	r31, 0x00	; 0
 8b4:	80 81       	ld	r24, Z
 8b6:	84 60       	ori	r24, 0x04	; 4
 8b8:	80 83       	st	Z, r24
 8ba:	08 95       	ret

000008bc <updateDutyCA1>:
	}
}

void updateDutyCA1(uint8_t duty){//900=0° 2800=90° 48000=180°
 8bc:	af 92       	push	r10
 8be:	bf 92       	push	r11
 8c0:	cf 92       	push	r12
 8c2:	df 92       	push	r13
 8c4:	ef 92       	push	r14
 8c6:	ff 92       	push	r15
 8c8:	0f 93       	push	r16
 8ca:	1f 93       	push	r17
	OCR1A = map(duty,0,255,2022.222222,4266.666667);
 8cc:	68 2f       	mov	r22, r24
 8ce:	70 e0       	ldi	r23, 0x00	; 0
 8d0:	80 e0       	ldi	r24, 0x00	; 0
 8d2:	90 e0       	ldi	r25, 0x00	; 0
 8d4:	0e 94 df 05 	call	0xbbe	; 0xbbe <__floatunsisf>
 8d8:	25 e4       	ldi	r18, 0x45	; 69
 8da:	2f 93       	push	r18
 8dc:	25 e8       	ldi	r18, 0x85	; 133
 8de:	2f 93       	push	r18
 8e0:	25 e5       	ldi	r18, 0x55	; 85
 8e2:	2f 93       	push	r18
 8e4:	2f 93       	push	r18
 8e6:	0f 2e       	mov	r0, r31
 8e8:	fc e1       	ldi	r31, 0x1C	; 28
 8ea:	af 2e       	mov	r10, r31
 8ec:	f7 ec       	ldi	r31, 0xC7	; 199
 8ee:	bf 2e       	mov	r11, r31
 8f0:	fc ef       	ldi	r31, 0xFC	; 252
 8f2:	cf 2e       	mov	r12, r31
 8f4:	f4 e4       	ldi	r31, 0x44	; 68
 8f6:	df 2e       	mov	r13, r31
 8f8:	f0 2d       	mov	r31, r0
 8fa:	e1 2c       	mov	r14, r1
 8fc:	f1 2c       	mov	r15, r1
 8fe:	0f e7       	ldi	r16, 0x7F	; 127
 900:	13 e4       	ldi	r17, 0x43	; 67
 902:	20 e0       	ldi	r18, 0x00	; 0
 904:	30 e0       	ldi	r19, 0x00	; 0
 906:	a9 01       	movw	r20, r18
 908:	0e 94 a5 03 	call	0x74a	; 0x74a <map>
 90c:	0f 90       	pop	r0
 90e:	0f 90       	pop	r0
 910:	0f 90       	pop	r0
 912:	0f 90       	pop	r0
 914:	0e 94 b0 05 	call	0xb60	; 0xb60 <__fixunssfsi>
 918:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 91c:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
}
 920:	1f 91       	pop	r17
 922:	0f 91       	pop	r16
 924:	ff 90       	pop	r15
 926:	ef 90       	pop	r14
 928:	df 90       	pop	r13
 92a:	cf 90       	pop	r12
 92c:	bf 90       	pop	r11
 92e:	af 90       	pop	r10
 930:	08 95       	ret

00000932 <updateDutyCB1>:

void updateDutyCB1(uint8_t duty){
 932:	af 92       	push	r10
 934:	bf 92       	push	r11
 936:	cf 92       	push	r12
 938:	df 92       	push	r13
 93a:	ef 92       	push	r14
 93c:	ff 92       	push	r15
 93e:	0f 93       	push	r16
 940:	1f 93       	push	r17
	OCR1B = map(duty,0,255,1800,4000);
 942:	68 2f       	mov	r22, r24
 944:	70 e0       	ldi	r23, 0x00	; 0
 946:	80 e0       	ldi	r24, 0x00	; 0
 948:	90 e0       	ldi	r25, 0x00	; 0
 94a:	0e 94 df 05 	call	0xbbe	; 0xbbe <__floatunsisf>
 94e:	25 e4       	ldi	r18, 0x45	; 69
 950:	2f 93       	push	r18
 952:	2a e7       	ldi	r18, 0x7A	; 122
 954:	2f 93       	push	r18
 956:	1f 92       	push	r1
 958:	1f 92       	push	r1
 95a:	0f 2e       	mov	r0, r31
 95c:	a1 2c       	mov	r10, r1
 95e:	b1 2c       	mov	r11, r1
 960:	f1 ee       	ldi	r31, 0xE1	; 225
 962:	cf 2e       	mov	r12, r31
 964:	f4 e4       	ldi	r31, 0x44	; 68
 966:	df 2e       	mov	r13, r31
 968:	f0 2d       	mov	r31, r0
 96a:	e1 2c       	mov	r14, r1
 96c:	f1 2c       	mov	r15, r1
 96e:	0f e7       	ldi	r16, 0x7F	; 127
 970:	13 e4       	ldi	r17, 0x43	; 67
 972:	20 e0       	ldi	r18, 0x00	; 0
 974:	30 e0       	ldi	r19, 0x00	; 0
 976:	a9 01       	movw	r20, r18
 978:	0e 94 a5 03 	call	0x74a	; 0x74a <map>
 97c:	0f 90       	pop	r0
 97e:	0f 90       	pop	r0
 980:	0f 90       	pop	r0
 982:	0f 90       	pop	r0
 984:	0e 94 b0 05 	call	0xb60	; 0xb60 <__fixunssfsi>
 988:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 98c:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 990:	1f 91       	pop	r17
 992:	0f 91       	pop	r16
 994:	ff 90       	pop	r15
 996:	ef 90       	pop	r14
 998:	df 90       	pop	r13
 99a:	cf 90       	pop	r12
 99c:	bf 90       	pop	r11
 99e:	af 90       	pop	r10
 9a0:	08 95       	ret

000009a2 <__subsf3>:
 9a2:	50 58       	subi	r21, 0x80	; 128

000009a4 <__addsf3>:
 9a4:	bb 27       	eor	r27, r27
 9a6:	aa 27       	eor	r26, r26
 9a8:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <__addsf3x>
 9ac:	0c 94 33 06 	jmp	0xc66	; 0xc66 <__fp_round>
 9b0:	0e 94 25 06 	call	0xc4a	; 0xc4a <__fp_pscA>
 9b4:	38 f0       	brcs	.+14     	; 0x9c4 <__addsf3+0x20>
 9b6:	0e 94 2c 06 	call	0xc58	; 0xc58 <__fp_pscB>
 9ba:	20 f0       	brcs	.+8      	; 0x9c4 <__addsf3+0x20>
 9bc:	39 f4       	brne	.+14     	; 0x9cc <__addsf3+0x28>
 9be:	9f 3f       	cpi	r25, 0xFF	; 255
 9c0:	19 f4       	brne	.+6      	; 0x9c8 <__addsf3+0x24>
 9c2:	26 f4       	brtc	.+8      	; 0x9cc <__addsf3+0x28>
 9c4:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__fp_nan>
 9c8:	0e f4       	brtc	.+2      	; 0x9cc <__addsf3+0x28>
 9ca:	e0 95       	com	r30
 9cc:	e7 fb       	bst	r30, 7
 9ce:	0c 94 1c 06 	jmp	0xc38	; 0xc38 <__fp_inf>

000009d2 <__addsf3x>:
 9d2:	e9 2f       	mov	r30, r25
 9d4:	0e 94 44 06 	call	0xc88	; 0xc88 <__fp_split3>
 9d8:	58 f3       	brcs	.-42     	; 0x9b0 <__addsf3+0xc>
 9da:	ba 17       	cp	r27, r26
 9dc:	62 07       	cpc	r22, r18
 9de:	73 07       	cpc	r23, r19
 9e0:	84 07       	cpc	r24, r20
 9e2:	95 07       	cpc	r25, r21
 9e4:	20 f0       	brcs	.+8      	; 0x9ee <__addsf3x+0x1c>
 9e6:	79 f4       	brne	.+30     	; 0xa06 <__addsf3x+0x34>
 9e8:	a6 f5       	brtc	.+104    	; 0xa52 <__addsf3x+0x80>
 9ea:	0c 94 66 06 	jmp	0xccc	; 0xccc <__fp_zero>
 9ee:	0e f4       	brtc	.+2      	; 0x9f2 <__addsf3x+0x20>
 9f0:	e0 95       	com	r30
 9f2:	0b 2e       	mov	r0, r27
 9f4:	ba 2f       	mov	r27, r26
 9f6:	a0 2d       	mov	r26, r0
 9f8:	0b 01       	movw	r0, r22
 9fa:	b9 01       	movw	r22, r18
 9fc:	90 01       	movw	r18, r0
 9fe:	0c 01       	movw	r0, r24
 a00:	ca 01       	movw	r24, r20
 a02:	a0 01       	movw	r20, r0
 a04:	11 24       	eor	r1, r1
 a06:	ff 27       	eor	r31, r31
 a08:	59 1b       	sub	r21, r25
 a0a:	99 f0       	breq	.+38     	; 0xa32 <__addsf3x+0x60>
 a0c:	59 3f       	cpi	r21, 0xF9	; 249
 a0e:	50 f4       	brcc	.+20     	; 0xa24 <__addsf3x+0x52>
 a10:	50 3e       	cpi	r21, 0xE0	; 224
 a12:	68 f1       	brcs	.+90     	; 0xa6e <__addsf3x+0x9c>
 a14:	1a 16       	cp	r1, r26
 a16:	f0 40       	sbci	r31, 0x00	; 0
 a18:	a2 2f       	mov	r26, r18
 a1a:	23 2f       	mov	r18, r19
 a1c:	34 2f       	mov	r19, r20
 a1e:	44 27       	eor	r20, r20
 a20:	58 5f       	subi	r21, 0xF8	; 248
 a22:	f3 cf       	rjmp	.-26     	; 0xa0a <__addsf3x+0x38>
 a24:	46 95       	lsr	r20
 a26:	37 95       	ror	r19
 a28:	27 95       	ror	r18
 a2a:	a7 95       	ror	r26
 a2c:	f0 40       	sbci	r31, 0x00	; 0
 a2e:	53 95       	inc	r21
 a30:	c9 f7       	brne	.-14     	; 0xa24 <__addsf3x+0x52>
 a32:	7e f4       	brtc	.+30     	; 0xa52 <__addsf3x+0x80>
 a34:	1f 16       	cp	r1, r31
 a36:	ba 0b       	sbc	r27, r26
 a38:	62 0b       	sbc	r22, r18
 a3a:	73 0b       	sbc	r23, r19
 a3c:	84 0b       	sbc	r24, r20
 a3e:	ba f0       	brmi	.+46     	; 0xa6e <__addsf3x+0x9c>
 a40:	91 50       	subi	r25, 0x01	; 1
 a42:	a1 f0       	breq	.+40     	; 0xa6c <__addsf3x+0x9a>
 a44:	ff 0f       	add	r31, r31
 a46:	bb 1f       	adc	r27, r27
 a48:	66 1f       	adc	r22, r22
 a4a:	77 1f       	adc	r23, r23
 a4c:	88 1f       	adc	r24, r24
 a4e:	c2 f7       	brpl	.-16     	; 0xa40 <__addsf3x+0x6e>
 a50:	0e c0       	rjmp	.+28     	; 0xa6e <__addsf3x+0x9c>
 a52:	ba 0f       	add	r27, r26
 a54:	62 1f       	adc	r22, r18
 a56:	73 1f       	adc	r23, r19
 a58:	84 1f       	adc	r24, r20
 a5a:	48 f4       	brcc	.+18     	; 0xa6e <__addsf3x+0x9c>
 a5c:	87 95       	ror	r24
 a5e:	77 95       	ror	r23
 a60:	67 95       	ror	r22
 a62:	b7 95       	ror	r27
 a64:	f7 95       	ror	r31
 a66:	9e 3f       	cpi	r25, 0xFE	; 254
 a68:	08 f0       	brcs	.+2      	; 0xa6c <__addsf3x+0x9a>
 a6a:	b0 cf       	rjmp	.-160    	; 0x9cc <__addsf3+0x28>
 a6c:	93 95       	inc	r25
 a6e:	88 0f       	add	r24, r24
 a70:	08 f0       	brcs	.+2      	; 0xa74 <__addsf3x+0xa2>
 a72:	99 27       	eor	r25, r25
 a74:	ee 0f       	add	r30, r30
 a76:	97 95       	ror	r25
 a78:	87 95       	ror	r24
 a7a:	08 95       	ret

00000a7c <__divsf3>:
 a7c:	0e 94 52 05 	call	0xaa4	; 0xaa4 <__divsf3x>
 a80:	0c 94 33 06 	jmp	0xc66	; 0xc66 <__fp_round>
 a84:	0e 94 2c 06 	call	0xc58	; 0xc58 <__fp_pscB>
 a88:	58 f0       	brcs	.+22     	; 0xaa0 <__divsf3+0x24>
 a8a:	0e 94 25 06 	call	0xc4a	; 0xc4a <__fp_pscA>
 a8e:	40 f0       	brcs	.+16     	; 0xaa0 <__divsf3+0x24>
 a90:	29 f4       	brne	.+10     	; 0xa9c <__divsf3+0x20>
 a92:	5f 3f       	cpi	r21, 0xFF	; 255
 a94:	29 f0       	breq	.+10     	; 0xaa0 <__divsf3+0x24>
 a96:	0c 94 1c 06 	jmp	0xc38	; 0xc38 <__fp_inf>
 a9a:	51 11       	cpse	r21, r1
 a9c:	0c 94 67 06 	jmp	0xcce	; 0xcce <__fp_szero>
 aa0:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__fp_nan>

00000aa4 <__divsf3x>:
 aa4:	0e 94 44 06 	call	0xc88	; 0xc88 <__fp_split3>
 aa8:	68 f3       	brcs	.-38     	; 0xa84 <__divsf3+0x8>

00000aaa <__divsf3_pse>:
 aaa:	99 23       	and	r25, r25
 aac:	b1 f3       	breq	.-20     	; 0xa9a <__divsf3+0x1e>
 aae:	55 23       	and	r21, r21
 ab0:	91 f3       	breq	.-28     	; 0xa96 <__divsf3+0x1a>
 ab2:	95 1b       	sub	r25, r21
 ab4:	55 0b       	sbc	r21, r21
 ab6:	bb 27       	eor	r27, r27
 ab8:	aa 27       	eor	r26, r26
 aba:	62 17       	cp	r22, r18
 abc:	73 07       	cpc	r23, r19
 abe:	84 07       	cpc	r24, r20
 ac0:	38 f0       	brcs	.+14     	; 0xad0 <__divsf3_pse+0x26>
 ac2:	9f 5f       	subi	r25, 0xFF	; 255
 ac4:	5f 4f       	sbci	r21, 0xFF	; 255
 ac6:	22 0f       	add	r18, r18
 ac8:	33 1f       	adc	r19, r19
 aca:	44 1f       	adc	r20, r20
 acc:	aa 1f       	adc	r26, r26
 ace:	a9 f3       	breq	.-22     	; 0xaba <__divsf3_pse+0x10>
 ad0:	35 d0       	rcall	.+106    	; 0xb3c <__divsf3_pse+0x92>
 ad2:	0e 2e       	mov	r0, r30
 ad4:	3a f0       	brmi	.+14     	; 0xae4 <__divsf3_pse+0x3a>
 ad6:	e0 e8       	ldi	r30, 0x80	; 128
 ad8:	32 d0       	rcall	.+100    	; 0xb3e <__divsf3_pse+0x94>
 ada:	91 50       	subi	r25, 0x01	; 1
 adc:	50 40       	sbci	r21, 0x00	; 0
 ade:	e6 95       	lsr	r30
 ae0:	00 1c       	adc	r0, r0
 ae2:	ca f7       	brpl	.-14     	; 0xad6 <__divsf3_pse+0x2c>
 ae4:	2b d0       	rcall	.+86     	; 0xb3c <__divsf3_pse+0x92>
 ae6:	fe 2f       	mov	r31, r30
 ae8:	29 d0       	rcall	.+82     	; 0xb3c <__divsf3_pse+0x92>
 aea:	66 0f       	add	r22, r22
 aec:	77 1f       	adc	r23, r23
 aee:	88 1f       	adc	r24, r24
 af0:	bb 1f       	adc	r27, r27
 af2:	26 17       	cp	r18, r22
 af4:	37 07       	cpc	r19, r23
 af6:	48 07       	cpc	r20, r24
 af8:	ab 07       	cpc	r26, r27
 afa:	b0 e8       	ldi	r27, 0x80	; 128
 afc:	09 f0       	breq	.+2      	; 0xb00 <__divsf3_pse+0x56>
 afe:	bb 0b       	sbc	r27, r27
 b00:	80 2d       	mov	r24, r0
 b02:	bf 01       	movw	r22, r30
 b04:	ff 27       	eor	r31, r31
 b06:	93 58       	subi	r25, 0x83	; 131
 b08:	5f 4f       	sbci	r21, 0xFF	; 255
 b0a:	3a f0       	brmi	.+14     	; 0xb1a <__divsf3_pse+0x70>
 b0c:	9e 3f       	cpi	r25, 0xFE	; 254
 b0e:	51 05       	cpc	r21, r1
 b10:	78 f0       	brcs	.+30     	; 0xb30 <__divsf3_pse+0x86>
 b12:	0c 94 1c 06 	jmp	0xc38	; 0xc38 <__fp_inf>
 b16:	0c 94 67 06 	jmp	0xcce	; 0xcce <__fp_szero>
 b1a:	5f 3f       	cpi	r21, 0xFF	; 255
 b1c:	e4 f3       	brlt	.-8      	; 0xb16 <__divsf3_pse+0x6c>
 b1e:	98 3e       	cpi	r25, 0xE8	; 232
 b20:	d4 f3       	brlt	.-12     	; 0xb16 <__divsf3_pse+0x6c>
 b22:	86 95       	lsr	r24
 b24:	77 95       	ror	r23
 b26:	67 95       	ror	r22
 b28:	b7 95       	ror	r27
 b2a:	f7 95       	ror	r31
 b2c:	9f 5f       	subi	r25, 0xFF	; 255
 b2e:	c9 f7       	brne	.-14     	; 0xb22 <__divsf3_pse+0x78>
 b30:	88 0f       	add	r24, r24
 b32:	91 1d       	adc	r25, r1
 b34:	96 95       	lsr	r25
 b36:	87 95       	ror	r24
 b38:	97 f9       	bld	r25, 7
 b3a:	08 95       	ret
 b3c:	e1 e0       	ldi	r30, 0x01	; 1
 b3e:	66 0f       	add	r22, r22
 b40:	77 1f       	adc	r23, r23
 b42:	88 1f       	adc	r24, r24
 b44:	bb 1f       	adc	r27, r27
 b46:	62 17       	cp	r22, r18
 b48:	73 07       	cpc	r23, r19
 b4a:	84 07       	cpc	r24, r20
 b4c:	ba 07       	cpc	r27, r26
 b4e:	20 f0       	brcs	.+8      	; 0xb58 <__divsf3_pse+0xae>
 b50:	62 1b       	sub	r22, r18
 b52:	73 0b       	sbc	r23, r19
 b54:	84 0b       	sbc	r24, r20
 b56:	ba 0b       	sbc	r27, r26
 b58:	ee 1f       	adc	r30, r30
 b5a:	88 f7       	brcc	.-30     	; 0xb3e <__divsf3_pse+0x94>
 b5c:	e0 95       	com	r30
 b5e:	08 95       	ret

00000b60 <__fixunssfsi>:
 b60:	0e 94 4c 06 	call	0xc98	; 0xc98 <__fp_splitA>
 b64:	88 f0       	brcs	.+34     	; 0xb88 <__fixunssfsi+0x28>
 b66:	9f 57       	subi	r25, 0x7F	; 127
 b68:	98 f0       	brcs	.+38     	; 0xb90 <__fixunssfsi+0x30>
 b6a:	b9 2f       	mov	r27, r25
 b6c:	99 27       	eor	r25, r25
 b6e:	b7 51       	subi	r27, 0x17	; 23
 b70:	b0 f0       	brcs	.+44     	; 0xb9e <__fixunssfsi+0x3e>
 b72:	e1 f0       	breq	.+56     	; 0xbac <__fixunssfsi+0x4c>
 b74:	66 0f       	add	r22, r22
 b76:	77 1f       	adc	r23, r23
 b78:	88 1f       	adc	r24, r24
 b7a:	99 1f       	adc	r25, r25
 b7c:	1a f0       	brmi	.+6      	; 0xb84 <__fixunssfsi+0x24>
 b7e:	ba 95       	dec	r27
 b80:	c9 f7       	brne	.-14     	; 0xb74 <__fixunssfsi+0x14>
 b82:	14 c0       	rjmp	.+40     	; 0xbac <__fixunssfsi+0x4c>
 b84:	b1 30       	cpi	r27, 0x01	; 1
 b86:	91 f0       	breq	.+36     	; 0xbac <__fixunssfsi+0x4c>
 b88:	0e 94 66 06 	call	0xccc	; 0xccc <__fp_zero>
 b8c:	b1 e0       	ldi	r27, 0x01	; 1
 b8e:	08 95       	ret
 b90:	0c 94 66 06 	jmp	0xccc	; 0xccc <__fp_zero>
 b94:	67 2f       	mov	r22, r23
 b96:	78 2f       	mov	r23, r24
 b98:	88 27       	eor	r24, r24
 b9a:	b8 5f       	subi	r27, 0xF8	; 248
 b9c:	39 f0       	breq	.+14     	; 0xbac <__fixunssfsi+0x4c>
 b9e:	b9 3f       	cpi	r27, 0xF9	; 249
 ba0:	cc f3       	brlt	.-14     	; 0xb94 <__fixunssfsi+0x34>
 ba2:	86 95       	lsr	r24
 ba4:	77 95       	ror	r23
 ba6:	67 95       	ror	r22
 ba8:	b3 95       	inc	r27
 baa:	d9 f7       	brne	.-10     	; 0xba2 <__fixunssfsi+0x42>
 bac:	3e f4       	brtc	.+14     	; 0xbbc <__fixunssfsi+0x5c>
 bae:	90 95       	com	r25
 bb0:	80 95       	com	r24
 bb2:	70 95       	com	r23
 bb4:	61 95       	neg	r22
 bb6:	7f 4f       	sbci	r23, 0xFF	; 255
 bb8:	8f 4f       	sbci	r24, 0xFF	; 255
 bba:	9f 4f       	sbci	r25, 0xFF	; 255
 bbc:	08 95       	ret

00000bbe <__floatunsisf>:
 bbe:	e8 94       	clt
 bc0:	09 c0       	rjmp	.+18     	; 0xbd4 <__floatsisf+0x12>

00000bc2 <__floatsisf>:
 bc2:	97 fb       	bst	r25, 7
 bc4:	3e f4       	brtc	.+14     	; 0xbd4 <__floatsisf+0x12>
 bc6:	90 95       	com	r25
 bc8:	80 95       	com	r24
 bca:	70 95       	com	r23
 bcc:	61 95       	neg	r22
 bce:	7f 4f       	sbci	r23, 0xFF	; 255
 bd0:	8f 4f       	sbci	r24, 0xFF	; 255
 bd2:	9f 4f       	sbci	r25, 0xFF	; 255
 bd4:	99 23       	and	r25, r25
 bd6:	a9 f0       	breq	.+42     	; 0xc02 <__floatsisf+0x40>
 bd8:	f9 2f       	mov	r31, r25
 bda:	96 e9       	ldi	r25, 0x96	; 150
 bdc:	bb 27       	eor	r27, r27
 bde:	93 95       	inc	r25
 be0:	f6 95       	lsr	r31
 be2:	87 95       	ror	r24
 be4:	77 95       	ror	r23
 be6:	67 95       	ror	r22
 be8:	b7 95       	ror	r27
 bea:	f1 11       	cpse	r31, r1
 bec:	f8 cf       	rjmp	.-16     	; 0xbde <__floatsisf+0x1c>
 bee:	fa f4       	brpl	.+62     	; 0xc2e <__floatsisf+0x6c>
 bf0:	bb 0f       	add	r27, r27
 bf2:	11 f4       	brne	.+4      	; 0xbf8 <__floatsisf+0x36>
 bf4:	60 ff       	sbrs	r22, 0
 bf6:	1b c0       	rjmp	.+54     	; 0xc2e <__floatsisf+0x6c>
 bf8:	6f 5f       	subi	r22, 0xFF	; 255
 bfa:	7f 4f       	sbci	r23, 0xFF	; 255
 bfc:	8f 4f       	sbci	r24, 0xFF	; 255
 bfe:	9f 4f       	sbci	r25, 0xFF	; 255
 c00:	16 c0       	rjmp	.+44     	; 0xc2e <__floatsisf+0x6c>
 c02:	88 23       	and	r24, r24
 c04:	11 f0       	breq	.+4      	; 0xc0a <__floatsisf+0x48>
 c06:	96 e9       	ldi	r25, 0x96	; 150
 c08:	11 c0       	rjmp	.+34     	; 0xc2c <__floatsisf+0x6a>
 c0a:	77 23       	and	r23, r23
 c0c:	21 f0       	breq	.+8      	; 0xc16 <__floatsisf+0x54>
 c0e:	9e e8       	ldi	r25, 0x8E	; 142
 c10:	87 2f       	mov	r24, r23
 c12:	76 2f       	mov	r23, r22
 c14:	05 c0       	rjmp	.+10     	; 0xc20 <__floatsisf+0x5e>
 c16:	66 23       	and	r22, r22
 c18:	71 f0       	breq	.+28     	; 0xc36 <__floatsisf+0x74>
 c1a:	96 e8       	ldi	r25, 0x86	; 134
 c1c:	86 2f       	mov	r24, r22
 c1e:	70 e0       	ldi	r23, 0x00	; 0
 c20:	60 e0       	ldi	r22, 0x00	; 0
 c22:	2a f0       	brmi	.+10     	; 0xc2e <__floatsisf+0x6c>
 c24:	9a 95       	dec	r25
 c26:	66 0f       	add	r22, r22
 c28:	77 1f       	adc	r23, r23
 c2a:	88 1f       	adc	r24, r24
 c2c:	da f7       	brpl	.-10     	; 0xc24 <__floatsisf+0x62>
 c2e:	88 0f       	add	r24, r24
 c30:	96 95       	lsr	r25
 c32:	87 95       	ror	r24
 c34:	97 f9       	bld	r25, 7
 c36:	08 95       	ret

00000c38 <__fp_inf>:
 c38:	97 f9       	bld	r25, 7
 c3a:	9f 67       	ori	r25, 0x7F	; 127
 c3c:	80 e8       	ldi	r24, 0x80	; 128
 c3e:	70 e0       	ldi	r23, 0x00	; 0
 c40:	60 e0       	ldi	r22, 0x00	; 0
 c42:	08 95       	ret

00000c44 <__fp_nan>:
 c44:	9f ef       	ldi	r25, 0xFF	; 255
 c46:	80 ec       	ldi	r24, 0xC0	; 192
 c48:	08 95       	ret

00000c4a <__fp_pscA>:
 c4a:	00 24       	eor	r0, r0
 c4c:	0a 94       	dec	r0
 c4e:	16 16       	cp	r1, r22
 c50:	17 06       	cpc	r1, r23
 c52:	18 06       	cpc	r1, r24
 c54:	09 06       	cpc	r0, r25
 c56:	08 95       	ret

00000c58 <__fp_pscB>:
 c58:	00 24       	eor	r0, r0
 c5a:	0a 94       	dec	r0
 c5c:	12 16       	cp	r1, r18
 c5e:	13 06       	cpc	r1, r19
 c60:	14 06       	cpc	r1, r20
 c62:	05 06       	cpc	r0, r21
 c64:	08 95       	ret

00000c66 <__fp_round>:
 c66:	09 2e       	mov	r0, r25
 c68:	03 94       	inc	r0
 c6a:	00 0c       	add	r0, r0
 c6c:	11 f4       	brne	.+4      	; 0xc72 <__fp_round+0xc>
 c6e:	88 23       	and	r24, r24
 c70:	52 f0       	brmi	.+20     	; 0xc86 <__fp_round+0x20>
 c72:	bb 0f       	add	r27, r27
 c74:	40 f4       	brcc	.+16     	; 0xc86 <__fp_round+0x20>
 c76:	bf 2b       	or	r27, r31
 c78:	11 f4       	brne	.+4      	; 0xc7e <__fp_round+0x18>
 c7a:	60 ff       	sbrs	r22, 0
 c7c:	04 c0       	rjmp	.+8      	; 0xc86 <__fp_round+0x20>
 c7e:	6f 5f       	subi	r22, 0xFF	; 255
 c80:	7f 4f       	sbci	r23, 0xFF	; 255
 c82:	8f 4f       	sbci	r24, 0xFF	; 255
 c84:	9f 4f       	sbci	r25, 0xFF	; 255
 c86:	08 95       	ret

00000c88 <__fp_split3>:
 c88:	57 fd       	sbrc	r21, 7
 c8a:	90 58       	subi	r25, 0x80	; 128
 c8c:	44 0f       	add	r20, r20
 c8e:	55 1f       	adc	r21, r21
 c90:	59 f0       	breq	.+22     	; 0xca8 <__fp_splitA+0x10>
 c92:	5f 3f       	cpi	r21, 0xFF	; 255
 c94:	71 f0       	breq	.+28     	; 0xcb2 <__fp_splitA+0x1a>
 c96:	47 95       	ror	r20

00000c98 <__fp_splitA>:
 c98:	88 0f       	add	r24, r24
 c9a:	97 fb       	bst	r25, 7
 c9c:	99 1f       	adc	r25, r25
 c9e:	61 f0       	breq	.+24     	; 0xcb8 <__fp_splitA+0x20>
 ca0:	9f 3f       	cpi	r25, 0xFF	; 255
 ca2:	79 f0       	breq	.+30     	; 0xcc2 <__fp_splitA+0x2a>
 ca4:	87 95       	ror	r24
 ca6:	08 95       	ret
 ca8:	12 16       	cp	r1, r18
 caa:	13 06       	cpc	r1, r19
 cac:	14 06       	cpc	r1, r20
 cae:	55 1f       	adc	r21, r21
 cb0:	f2 cf       	rjmp	.-28     	; 0xc96 <__fp_split3+0xe>
 cb2:	46 95       	lsr	r20
 cb4:	f1 df       	rcall	.-30     	; 0xc98 <__fp_splitA>
 cb6:	08 c0       	rjmp	.+16     	; 0xcc8 <__fp_splitA+0x30>
 cb8:	16 16       	cp	r1, r22
 cba:	17 06       	cpc	r1, r23
 cbc:	18 06       	cpc	r1, r24
 cbe:	99 1f       	adc	r25, r25
 cc0:	f1 cf       	rjmp	.-30     	; 0xca4 <__fp_splitA+0xc>
 cc2:	86 95       	lsr	r24
 cc4:	71 05       	cpc	r23, r1
 cc6:	61 05       	cpc	r22, r1
 cc8:	08 94       	sec
 cca:	08 95       	ret

00000ccc <__fp_zero>:
 ccc:	e8 94       	clt

00000cce <__fp_szero>:
 cce:	bb 27       	eor	r27, r27
 cd0:	66 27       	eor	r22, r22
 cd2:	77 27       	eor	r23, r23
 cd4:	cb 01       	movw	r24, r22
 cd6:	97 f9       	bld	r25, 7
 cd8:	08 95       	ret

00000cda <__mulsf3>:
 cda:	0e 94 80 06 	call	0xd00	; 0xd00 <__mulsf3x>
 cde:	0c 94 33 06 	jmp	0xc66	; 0xc66 <__fp_round>
 ce2:	0e 94 25 06 	call	0xc4a	; 0xc4a <__fp_pscA>
 ce6:	38 f0       	brcs	.+14     	; 0xcf6 <__mulsf3+0x1c>
 ce8:	0e 94 2c 06 	call	0xc58	; 0xc58 <__fp_pscB>
 cec:	20 f0       	brcs	.+8      	; 0xcf6 <__mulsf3+0x1c>
 cee:	95 23       	and	r25, r21
 cf0:	11 f0       	breq	.+4      	; 0xcf6 <__mulsf3+0x1c>
 cf2:	0c 94 1c 06 	jmp	0xc38	; 0xc38 <__fp_inf>
 cf6:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__fp_nan>
 cfa:	11 24       	eor	r1, r1
 cfc:	0c 94 67 06 	jmp	0xcce	; 0xcce <__fp_szero>

00000d00 <__mulsf3x>:
 d00:	0e 94 44 06 	call	0xc88	; 0xc88 <__fp_split3>
 d04:	70 f3       	brcs	.-36     	; 0xce2 <__mulsf3+0x8>

00000d06 <__mulsf3_pse>:
 d06:	95 9f       	mul	r25, r21
 d08:	c1 f3       	breq	.-16     	; 0xcfa <__mulsf3+0x20>
 d0a:	95 0f       	add	r25, r21
 d0c:	50 e0       	ldi	r21, 0x00	; 0
 d0e:	55 1f       	adc	r21, r21
 d10:	62 9f       	mul	r22, r18
 d12:	f0 01       	movw	r30, r0
 d14:	72 9f       	mul	r23, r18
 d16:	bb 27       	eor	r27, r27
 d18:	f0 0d       	add	r31, r0
 d1a:	b1 1d       	adc	r27, r1
 d1c:	63 9f       	mul	r22, r19
 d1e:	aa 27       	eor	r26, r26
 d20:	f0 0d       	add	r31, r0
 d22:	b1 1d       	adc	r27, r1
 d24:	aa 1f       	adc	r26, r26
 d26:	64 9f       	mul	r22, r20
 d28:	66 27       	eor	r22, r22
 d2a:	b0 0d       	add	r27, r0
 d2c:	a1 1d       	adc	r26, r1
 d2e:	66 1f       	adc	r22, r22
 d30:	82 9f       	mul	r24, r18
 d32:	22 27       	eor	r18, r18
 d34:	b0 0d       	add	r27, r0
 d36:	a1 1d       	adc	r26, r1
 d38:	62 1f       	adc	r22, r18
 d3a:	73 9f       	mul	r23, r19
 d3c:	b0 0d       	add	r27, r0
 d3e:	a1 1d       	adc	r26, r1
 d40:	62 1f       	adc	r22, r18
 d42:	83 9f       	mul	r24, r19
 d44:	a0 0d       	add	r26, r0
 d46:	61 1d       	adc	r22, r1
 d48:	22 1f       	adc	r18, r18
 d4a:	74 9f       	mul	r23, r20
 d4c:	33 27       	eor	r19, r19
 d4e:	a0 0d       	add	r26, r0
 d50:	61 1d       	adc	r22, r1
 d52:	23 1f       	adc	r18, r19
 d54:	84 9f       	mul	r24, r20
 d56:	60 0d       	add	r22, r0
 d58:	21 1d       	adc	r18, r1
 d5a:	82 2f       	mov	r24, r18
 d5c:	76 2f       	mov	r23, r22
 d5e:	6a 2f       	mov	r22, r26
 d60:	11 24       	eor	r1, r1
 d62:	9f 57       	subi	r25, 0x7F	; 127
 d64:	50 40       	sbci	r21, 0x00	; 0
 d66:	9a f0       	brmi	.+38     	; 0xd8e <__mulsf3_pse+0x88>
 d68:	f1 f0       	breq	.+60     	; 0xda6 <__mulsf3_pse+0xa0>
 d6a:	88 23       	and	r24, r24
 d6c:	4a f0       	brmi	.+18     	; 0xd80 <__mulsf3_pse+0x7a>
 d6e:	ee 0f       	add	r30, r30
 d70:	ff 1f       	adc	r31, r31
 d72:	bb 1f       	adc	r27, r27
 d74:	66 1f       	adc	r22, r22
 d76:	77 1f       	adc	r23, r23
 d78:	88 1f       	adc	r24, r24
 d7a:	91 50       	subi	r25, 0x01	; 1
 d7c:	50 40       	sbci	r21, 0x00	; 0
 d7e:	a9 f7       	brne	.-22     	; 0xd6a <__mulsf3_pse+0x64>
 d80:	9e 3f       	cpi	r25, 0xFE	; 254
 d82:	51 05       	cpc	r21, r1
 d84:	80 f0       	brcs	.+32     	; 0xda6 <__mulsf3_pse+0xa0>
 d86:	0c 94 1c 06 	jmp	0xc38	; 0xc38 <__fp_inf>
 d8a:	0c 94 67 06 	jmp	0xcce	; 0xcce <__fp_szero>
 d8e:	5f 3f       	cpi	r21, 0xFF	; 255
 d90:	e4 f3       	brlt	.-8      	; 0xd8a <__mulsf3_pse+0x84>
 d92:	98 3e       	cpi	r25, 0xE8	; 232
 d94:	d4 f3       	brlt	.-12     	; 0xd8a <__mulsf3_pse+0x84>
 d96:	86 95       	lsr	r24
 d98:	77 95       	ror	r23
 d9a:	67 95       	ror	r22
 d9c:	b7 95       	ror	r27
 d9e:	f7 95       	ror	r31
 da0:	e7 95       	ror	r30
 da2:	9f 5f       	subi	r25, 0xFF	; 255
 da4:	c1 f7       	brne	.-16     	; 0xd96 <__mulsf3_pse+0x90>
 da6:	fe 2b       	or	r31, r30
 da8:	88 0f       	add	r24, r24
 daa:	91 1d       	adc	r25, r1
 dac:	96 95       	lsr	r25
 dae:	87 95       	ror	r24
 db0:	97 f9       	bld	r25, 7
 db2:	08 95       	ret

00000db4 <_exit>:
 db4:	f8 94       	cli

00000db6 <__stop_program>:
 db6:	ff cf       	rjmp	.-2      	; 0xdb6 <__stop_program>
